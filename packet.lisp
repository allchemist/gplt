(in-package :gplt)

(defun array-row (array row)
  (let ((row-list nil))
    (dotimes (i (array-dimension array 1))
      (push (aref array row i) row-list))
    (nreverse row-list)))

(defun make-plot (data &key title multi ranges labels with color pointsize pointtype smooth terminal output dest other-commands)
  (gprestart dest)
  (map nil #'gpexec
       (remove nil `((unset key)
		     ,(when title `(set title ,(write-to-string title)))
		     ,(when terminal `(set term ,terminal))
		     ,(when output `(set output ,(write-to-string output)))
		     ,(when output `(set term "png"))
		     ,(when (first labels) `(set xlabel ,(write-to-string (first labels))))
		     ,(when (second labels) `(set ylabel ,(write-to-string (second labels))))
		     ,(when (third labels) `(set zlabel ,(write-to-string (third labels))))
		     ,(when (first ranges) `(set xrange ,(cons 'range (first ranges))))
		     ,(when (second ranges) `(set yrange ,(cons 'range (second ranges))))
		     ,(when (third ranges) `(set zrange ,(cons 'range (third ranges))))
		     ,@other-commands)))
  (when multi (gpexec '(set multiplot)))
  (dolist (%data (if multi data (list data)))
    (let ((plot-params
	   (remove nil
		   (append
		    (when with `(with ,@(if (listp with) with `(,with))))
		    (when color `(lc rgb ,(format nil "'~A'" color)))
		    (when pointtype `(pt ,pointtype))
		    (when pointsize `(ps ,pointsize))
		    (when smooth `(smooth csplines))))))
      (cond ((listp %data)
	     (if (symbolp (first %data))
		 (gpexec (append `(,(if (find #\y (string-downcase (write-to-string %data)))
					'splot 'plot)
				    ,%data) plot-params))
		 (progn (gpexec (append `(,(ecase (length (first %data)) (2 'plot) (3 'splot)) "'-'")
					plot-params))
			(dotimes (i (length %data))
			  (let ((r (elt %data i))) (gpexec (list (first r) (second r)))))
			(gpexec :e))))
	    ((arrayp %data)
	     (gpexec (append `(,(ecase (array-dimension %data 1) (2 'plot) (3 'splot)) "'-'")
			     plot-params))
	     (dotimes (i (array-dimension %data 0))
	       (gpexec (array-row %data i)))
	     (gpexec :e)))))
  (when multi (gpexec '(unset multiplot)))
  (gpdisplay))
